/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wts.roms.model;

import java.beans.Customizer;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Logger;
import org.openide.util.Exceptions;

/**
 * Customizer for CriticalModelVariablesInfo objects.
 * 
 * Should be added as a PropertyChangeListener to the GlobalInfo instance by
 * the encompassing TopComponent.  The customizer will listen for changes to
 * the canonical model file and update the model variables accordingly. If added
 * as a PropertyChangeListener, should be removed as well at the componentClosed()
 * method of the TopComponent.
 * 
 * @author William.Stockhausen
 */
public class CriticalModelVariablesInfoCustomizer extends javax.swing.JPanel
                                             implements Customizer, PropertyChangeListener {

    private static final Logger logger = Logger.getLogger(CriticalModelVariablesInfoCustomizer.class.getName());
    
    /** the object being customized */
    private CriticalModelVariablesInfo obj = null;
    /** the GlobalInfo object */
    private GlobalInfo globalInfo;
    /**
     * Creates new form CriticalModelVariablesInfoCustomizer
     */
    public CriticalModelVariablesInfoCustomizer() {
        initComponents();
        globalInfo = GlobalInfo.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpPanel3 = new javax.swing.JPanel();
        jspVariables = new javax.swing.JScrollPane();
        jpVariables = new javax.swing.JPanel();
        criticalVariableInfoCustomizer1 = new wts.roms.model.CriticalVariableInfoCustomizer();
        jPanel1 = new javax.swing.JPanel();
        jcbROMSvariables = new javax.swing.JComboBox();

        setLayout(new java.awt.BorderLayout());

        jpPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CriticalModelVariablesInfoCustomizer.class, "CriticalModelVariablesInfoCustomizer.jpPanel3.border.title"))); // NOI18N

        jpVariables.setLayout(new java.awt.GridLayout(0, 1));

        criticalVariableInfoCustomizer1.setEnabled(false);
        jpVariables.add(criticalVariableInfoCustomizer1);

        jspVariables.setViewportView(jpVariables);

        javax.swing.GroupLayout jpPanel3Layout = new javax.swing.GroupLayout(jpPanel3);
        jpPanel3.setLayout(jpPanel3Layout);
        jpPanel3Layout.setHorizontalGroup(
            jpPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspVariables, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
        );
        jpPanel3Layout.setVerticalGroup(
            jpPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspVariables, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
        );

        add(jpPanel3, java.awt.BorderLayout.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CriticalModelVariablesInfoCustomizer.class, "CriticalModelVariablesInfoCustomizer.jPanel1.border.title"))); // NOI18N

        jcbROMSvariables.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jcbROMSvariables, 0, 638, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jcbROMSvariables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        add(jPanel1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected wts.roms.model.CriticalVariableInfoCustomizer criticalVariableInfoCustomizer1;
    protected javax.swing.JPanel jPanel1;
    protected javax.swing.JComboBox jcbROMSvariables;
    protected javax.swing.JPanel jpPanel3;
    protected javax.swing.JPanel jpVariables;
    protected javax.swing.JScrollPane jspVariables;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Sets the object to be customized in the customizer. Must be a 
     * CriticalModelVariablesInfo instance.
     * 
     * @param bean 
     */
    @Override
    public void setObject(Object bean) {
        if (bean instanceof CriticalModelVariablesInfo){
            obj = (CriticalModelVariablesInfo) bean;
            setObject();
        }
    }

    private void setObject(){
        Set<String> names = obj.getNames();
        for (String name: names){
            logger.info("Found critical variable "+name);
            CriticalVariableInfo cvi = obj.getVariableInfo(name);
            CriticalVariableInfoCustomizer cvic = new CriticalVariableInfoCustomizer();
            cvic.setObject(cvi);
            jpVariables.add(cvic);
        }
        setROMSVariables();
        validate();
    }

    /**
     * Sets the variables listed in jcbROMSvariables by reading them from the
     * grid file given in the GlobalInfo singleton.
     */
    private void setROMSVariables(){
        jcbROMSvariables.removeAllItems();
        if (!globalInfo.getCanonicalFile().equals(GlobalInfo.PROP_NotSet)){
            try {
                NetcdfReader nR = new NetcdfReader(globalInfo.getCanonicalFile());
                String[] romsNames = nR.getVariableNames();
                Set<String> names = new TreeSet<>();
                for (String romsName: romsNames) names.add(romsName);
                Iterator<String> it = names.iterator();
                while (it.hasNext()) jcbROMSvariables.addItem(it.next());
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }
    
    /**
     * Method reacts to changes in the ROMS grid file property of the GlobalInfo singleton
     * by forcing an update of the ROMS variables listed in jcbROMSvariables.
     * 
     * @param evt - a ProertyChange event
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(GlobalInfo.PROP_CanonicalFile)){
            setROMSVariables();
            validate();
        }
    }
}
