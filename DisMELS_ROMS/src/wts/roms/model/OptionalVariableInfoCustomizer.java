/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wts.roms.model;

import java.beans.Customizer;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Logger;

/**
 * Customizer for OptionalModelVariableInfo instances.
 * 
 * @author William.Stockhausen
 */
public class OptionalVariableInfoCustomizer extends javax.swing.JPanel
                                            implements Customizer, PropertyChangeListener {

    /** the object being customized */
    private OptionalVariableInfo obj;
    /** flag to enable responses to gui actions */
    private boolean doActions = true;
    
    /** class-level logger */
    private static final Logger logger = Logger.getLogger(CriticalVariableInfoCustomizer.class.getName());
    
    /**
     * Creates new form ModelVariableInfoCustomizer
     */
    public OptionalVariableInfoCustomizer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jchkChecked = new javax.swing.JCheckBox();
        jtfNameInROMS = new javax.swing.JTextField();
        jtfName = new javax.swing.JTextField();
        jchkSpatialField = new javax.swing.JCheckBox();
        jcbMaskType = new javax.swing.JComboBox();
        jtfDescription = new javax.swing.JTextField();

        jchkChecked.setText(org.openide.util.NbBundle.getMessage(OptionalVariableInfoCustomizer.class, "OptionalVariableInfoCustomizer.jchkChecked.text")); // NOI18N
        jchkChecked.setToolTipText(org.openide.util.NbBundle.getMessage(OptionalVariableInfoCustomizer.class, "OptionalVariableInfoCustomizer.jchkChecked.toolTipText")); // NOI18N
        jchkChecked.setInheritsPopupMenu(true);
        jchkChecked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkCheckedActionPerformed(evt);
            }
        });

        jtfNameInROMS.setText(org.openide.util.NbBundle.getMessage(OptionalVariableInfoCustomizer.class, "OptionalVariableInfoCustomizer.jtfNameInROMS.text")); // NOI18N
        jtfNameInROMS.setToolTipText(org.openide.util.NbBundle.getMessage(OptionalVariableInfoCustomizer.class, "OptionalVariableInfoCustomizer.jtfNameInROMS.toolTipText")); // NOI18N
        jtfNameInROMS.setInheritsPopupMenu(true);
        jtfNameInROMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfNameInROMSActionPerformed(evt);
            }
        });

        jtfName.setText(org.openide.util.NbBundle.getMessage(OptionalVariableInfoCustomizer.class, "OptionalVariableInfoCustomizer.jtfName.text")); // NOI18N
        jtfName.setToolTipText(org.openide.util.NbBundle.getMessage(OptionalVariableInfoCustomizer.class, "OptionalVariableInfoCustomizer.jtfName.toolTipText")); // NOI18N
        jtfName.setInheritsPopupMenu(true);
        jtfName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfNameActionPerformed(evt);
            }
        });

        jchkSpatialField.setText(org.openide.util.NbBundle.getMessage(OptionalVariableInfoCustomizer.class, "OptionalVariableInfoCustomizer.jchkSpatialField.text")); // NOI18N
        jchkSpatialField.setInheritsPopupMenu(true);
        jchkSpatialField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkSpatialFieldActionPerformed(evt);
            }
        });

        jcbMaskType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "none", "rho", "psi", "u", "v" }));
        jcbMaskType.setToolTipText(org.openide.util.NbBundle.getMessage(OptionalVariableInfoCustomizer.class, "OptionalVariableInfoCustomizer.jcbMaskType.toolTipText")); // NOI18N
        jcbMaskType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMaskTypeActionPerformed(evt);
            }
        });

        jtfDescription.setText(org.openide.util.NbBundle.getMessage(OptionalVariableInfoCustomizer.class, "OptionalVariableInfoCustomizer.jtfDescription.text")); // NOI18N
        jtfDescription.setToolTipText(org.openide.util.NbBundle.getMessage(OptionalVariableInfoCustomizer.class, "OptionalVariableInfoCustomizer.jtfDescription.toolTipText")); // NOI18N
        jtfDescription.setInheritsPopupMenu(true);
        jtfDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfDescriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jchkChecked)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfNameInROMS, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jchkSpatialField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbMaskType, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jtfNameInROMS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jtfDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jchkChecked)
                .addComponent(jchkSpatialField)
                .addComponent(jcbMaskType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jtfNameInROMSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfNameInROMSActionPerformed
        if (doActions) obj.setNameInROMSDataset(jtfNameInROMS.getText());
    }//GEN-LAST:event_jtfNameInROMSActionPerformed

    private void jtfNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfNameActionPerformed
        if (doActions) obj.setName(jtfName.getText());
    }//GEN-LAST:event_jtfNameActionPerformed

    private void jtfDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfDescriptionActionPerformed
        if (doActions) obj.setDescription(jtfDescription.getText());
    }//GEN-LAST:event_jtfDescriptionActionPerformed

    private void jcbMaskTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMaskTypeActionPerformed
        if (doActions) obj.setMaskType((String)jcbMaskType.getSelectedItem());
    }//GEN-LAST:event_jcbMaskTypeActionPerformed

    private void jchkSpatialFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkSpatialFieldActionPerformed
        if (doActions) obj.setSpatialField(jchkSpatialField.isSelected());
    }//GEN-LAST:event_jchkSpatialFieldActionPerformed

    private void jchkCheckedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkCheckedActionPerformed
        if (doActions) obj.setChecked(jchkChecked.isSelected());
    }//GEN-LAST:event_jchkCheckedActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JComboBox jcbMaskType;
    protected javax.swing.JCheckBox jchkChecked;
    protected javax.swing.JCheckBox jchkSpatialField;
    protected javax.swing.JTextField jtfDescription;
    protected javax.swing.JTextField jtfName;
    protected javax.swing.JTextField jtfNameInROMS;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setObject(Object bean) {
        if (bean instanceof OptionalVariableInfo){
            obj = (OptionalVariableInfo) bean;
            doActions = false;
            jchkChecked.setSelected(obj.isChecked());
            jtfNameInROMS.setText(obj.getNameInROMSDataset());
            jtfName.setText(obj.getName());
            jchkSpatialField.setSelected(obj.isSpatialField());
            jcbMaskType.setSelectedItem(obj.getMaskType());
            jtfDescription.setText(obj.getDescription());
            jtfDescription.setToolTipText("Description: "+obj.getDescription());
            setEnabled(true);
            validate();
            obj.addPropertyChangeListener(this);
            doActions = true;
        }
    }
    
    @Override
    public void setEnabled(boolean b){
        super.setEnabled(b);
        jchkChecked.setEnabled(b);
        jtfNameInROMS.setEnabled(b);
        jtfName.setEnabled(b);
        jchkSpatialField.setEnabled(b);
        jcbMaskType.setEnabled(b);
        jtfDescription.setEnabled(b);
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        logger.info("PropertyChange detected: "+pce.toString());
        if (pce.getPropertyName().equals(OptionalVariableInfo.PROP_Checked)){
            jchkChecked.setSelected(obj.isChecked());
        } else if (pce.getPropertyName().equals(OptionalVariableInfo.PROP_Description)){
            jtfDescription.setText(obj.getDescription());
        } else if (pce.getPropertyName().equals(OptionalVariableInfo.PROP_Field)){
            jchkSpatialField.setSelected(obj.isSpatialField());
        } else if (pce.getPropertyName().equals(OptionalVariableInfo.PROP_MaskType)){
            jcbMaskType.setSelectedItem(obj.getMaskType());
        } else if (pce.getPropertyName().equals(OptionalVariableInfo.PROP_Name)){
            jtfName.setText(obj.getName());
        } else if (pce.getPropertyName().equals(OptionalVariableInfo.PROP_NameInROMS)){
            jtfNameInROMS.setText(obj.getNameInROMSDataset());
        }
    }
}
