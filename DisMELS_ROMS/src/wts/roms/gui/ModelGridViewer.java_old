/*
 * ModelGridViewer.java
 *
 * Created on December 6, 2005, 11:35 AM
 */

package wts.roms.gui;

/**
 *
 * @author  William Stockhausen
 */
import com.wtstockhausen.utils.FileFilterImpl;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.geotools.feature.IllegalAttributeException;
import org.geotools.feature.SchemaException;
import org.opengis.referencing.operation.TransformException;
import wts.roms.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.geotools.feature.FeatureCollection;
import wts.GIS.shapefile.ShapefileCreator;
import wts.roms.gis.CSCreator;
import wts.roms.gis.MapGUI_JPanel;
import wts.roms.gis.ModelGrid2DMapData;
import wts.roms.model.ModelData;
import wts.roms.model.ModelGrid2D;

public class ModelGridViewer extends javax.swing.JFrame {
    
    ModelGrid2DMapData mapData = null;
    Table2DViewer_JPanel tableViewer;
    JFileChooser jFC;
    ModelGrid2D grid;

    private MapGUI_JPanel mapGUI;
    
    /** Creates new form ModelDataViewer */
    public ModelGridViewer() {
        initComponents();
        initComponents1();
    }
    
    private void initComponents1() {
        jFC = new JFileChooser();
        jFC.setCurrentDirectory(new java.io.File("D:/MyDocuments/Projects/ROMS/ModelData"));
        
        mapGUI = new MapGUI_JPanel();
        jpMapViewer.add(mapGUI,java.awt.BorderLayout.CENTER);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgRegions = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jcbDataset = new javax.swing.JComboBox();
        jbDataset = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jcbVars = new javax.swing.JComboBox();
        jpViewer = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jpMapViewer = new javax.swing.JPanel();
        jpTableViewer = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmiCreateLineShapefile = new javax.swing.JMenuItem();
        jmiCreateMaskShapefile = new javax.swing.JMenuItem();
        jmiCreateBathymetryShapefile = new javax.swing.JMenuItem();
        jmiExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jrbAlaskaCS = new javax.swing.JRadioButtonMenuItem();
        jrbKoreaCS = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ROMS grid dataset"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jcbDataset.setEditable(true);
        jPanel1.add(jcbDataset, java.awt.BorderLayout.CENTER);

        jbDataset.setText("Select");
        jbDataset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDataset(evt);
            }
        });
        jPanel1.add(jbDataset, java.awt.BorderLayout.EAST);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("ROMS grid variables"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jcbVars.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "h", "pm", "pn", "dmde", "dndx", "x_rho", "x_psi", "x_u", "x_v", "y_rho", "y_psi", "y_u", "y_v", "lat_rho", "lat_psi", "lat_u", "lat_v", "lon_rho", "lon_psi", "lon_u", "lon_v", "mask_rho", "mask_psi", "mask_u", "mask_v", "angle" }));
        jcbVars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTable(evt);
            }
        });
        jPanel2.add(jcbVars, java.awt.BorderLayout.CENTER);

        tableViewer = new Table2DViewer_JPanel();
        jpTableViewer.add(tableViewer);
        jpViewer.setLayout(new java.awt.BorderLayout());

        jpMapViewer.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Map", jpMapViewer);

        org.jdesktop.layout.GroupLayout jpTableViewerLayout = new org.jdesktop.layout.GroupLayout(jpTableViewer);
        jpTableViewer.setLayout(jpTableViewerLayout);
        jpTableViewerLayout.setHorizontalGroup(
            jpTableViewerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 409, Short.MAX_VALUE)
        );
        jpTableViewerLayout.setVerticalGroup(
            jpTableViewerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 316, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Table", jpTableViewer);

        jpViewer.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        jmiCreateLineShapefile.setText("Create line shapefile from grid");
        jmiCreateLineShapefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCreateLineShapefileActionPerformed(evt);
            }
        });
        jMenu1.add(jmiCreateLineShapefile);

        jmiCreateMaskShapefile.setText("Create land mask shapefile");
        jmiCreateMaskShapefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCreateMaskShapefileActionPerformed(evt);
            }
        });
        jMenu1.add(jmiCreateMaskShapefile);

        jmiCreateBathymetryShapefile.setText("Create bathymetry shapefile from grid");
        jmiCreateBathymetryShapefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCreateBathymetryShapefileActionPerformed(evt);
            }
        });
        jMenu1.add(jmiCreateBathymetryShapefile);

        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jMenu1.add(jmiExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("GIS");

        jMenu4.setText("Regions");

        bgRegions.add(jrbAlaskaCS);
        jrbAlaskaCS.setSelected(true);
        jrbAlaskaCS.setText("Alaska");
        jrbAlaskaCS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbAlaskaCSActionPerformed(evt);
            }
        });
        jMenu4.add(jrbAlaskaCS);

        bgRegions.add(jrbKoreaCS);
        jrbKoreaCS.setText("Korea");
        jrbKoreaCS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbKoreaCSActionPerformed(evt);
            }
        });
        jMenu4.add(jrbKoreaCS);

        jMenu3.add(jMenu4);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
            .add(jpViewer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpViewer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setTable(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTable
// TODO add your handling code here:
        setTable();
    }//GEN-LAST:event_setTable

    private void selectDataset(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDataset
        FileFilterImpl ff = new FileFilterImpl("nc", "ROMS model grid file");
        jFC.resetChoosableFileFilters();
        jFC.addChoosableFileFilter(ff);
        int res = jFC.showOpenDialog(this);
        if (res==JFileChooser.APPROVE_OPTION) {
            String dsn = jFC.getSelectedFile().getPath();
            jcbDataset.addItem(dsn);
            jcbDataset.setSelectedItem(dsn);
            grid = new ModelGrid2D(dsn);
            if (grid==null) {
                JOptionPane d = new JOptionPane();
                d.showMessageDialog(null,"Not a ROMS grid file",
                                         "Grid file selection",
                                         JOptionPane.ERROR_MESSAGE);
                return;
            }
            setMap();
            setTable();
        }
    }//GEN-LAST:event_selectDataset

    private void jmiCreateLineShapefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCreateLineShapefileActionPerformed
        FileFilterImpl ff = new FileFilterImpl("shp", "Shapefiles");
        jFC.resetChoosableFileFilters();
        jFC.addChoosableFileFilter(ff);
        jFC.setDialogTitle("Select output shapefile for grid lines");
        int res = jFC.showSaveDialog(this);
        if (res==jFC.APPROVE_OPTION) {
            try {
                File fshp = jFC.getSelectedFile();//GEN-LAST:event_jmiCreateLineShapefileActionPerformed
                URL url = fshp.toURI().toURL();
                FeatureCollection fc = mapGUI.getGridMapData().getGridLines();
                ShapefileCreator sc = new ShapefileCreator();
                sc.setShapefileURL(url);
                sc.createShapefile(fc);
            } catch (MalformedURLException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SchemaException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAttributeException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TransformException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void jmiCreateBathymetryShapefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCreateBathymetryShapefileActionPerformed
        FileFilterImpl ff = new FileFilterImpl("shp", "Shapefiles");
        jFC.resetChoosableFileFilters();
        jFC.addChoosableFileFilter(ff);
        jFC.setDialogTitle("Select output shapefile for bathymetry");
        int res = jFC.showSaveDialog(this);
        if (res==jFC.APPROVE_OPTION) {
            try {
                File fshp = jFC.getSelectedFile();
                URL url = fshp.toURI().toURL();
                FeatureCollection fc = mapGUI.getGridMapData().getBathymetry();
                ShapefileCreator sc = new ShapefileCreator();
                sc.setShapefileURL(url);
                sc.createShapefile(fc);
            } catch (MalformedURLException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SchemaException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAttributeException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TransformException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jmiCreateBathymetryShapefileActionPerformed

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed
        setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_jmiExitActionPerformed

    private void jrbAlaskaCSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbAlaskaCSActionPerformed
        CSCreator.setRegion(CSCreator.REGION_ALASKA);
    }//GEN-LAST:event_jrbAlaskaCSActionPerformed

    private void jrbKoreaCSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbKoreaCSActionPerformed
        CSCreator.setRegion(CSCreator.REGION_ROK);
    }//GEN-LAST:event_jrbKoreaCSActionPerformed

    private void jmiCreateMaskShapefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCreateMaskShapefileActionPerformed
        FileFilterImpl ff = new FileFilterImpl("shp", "Shapefiles");
        jFC.resetChoosableFileFilters();
        jFC.addChoosableFileFilter(ff);
        jFC.setDialogTitle("Select output shapefile for land mask");
        int res = jFC.showSaveDialog(this);
        if (res==jFC.APPROVE_OPTION) {
            try {
                File fshp = jFC.getSelectedFile();
                URL url = fshp.toURI().toURL();
                FeatureCollection fc = mapGUI.getGridMapData().getMask();
                ShapefileCreator sc = new ShapefileCreator();
                sc.setShapefileURL(url);
                sc.createShapefile(fc);
            } catch (MalformedURLException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SchemaException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAttributeException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TransformException ex) {
                Logger.getLogger(ModelGridViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jmiCreateMaskShapefileActionPerformed
    
    private void setMap() {
        mapGUI.setGridFileName(jFC.getSelectedFile().getAbsolutePath());
    }
    private void setTable() {
        String str = (String) jcbVars.getSelectedItem();
        ModelData md = grid.getGridField(str);
        TableModelData2D tm = new TableModelData2D(md); 
        tableViewer.setTableModel(tm);
        tableViewer.validate();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModelGridViewer().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgRegions;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbDataset;
    private javax.swing.JComboBox jcbDataset;
    private javax.swing.JComboBox jcbVars;
    private javax.swing.JMenuItem jmiCreateBathymetryShapefile;
    private javax.swing.JMenuItem jmiCreateLineShapefile;
    private javax.swing.JMenuItem jmiCreateMaskShapefile;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JPanel jpMapViewer;
    private javax.swing.JPanel jpTableViewer;
    private javax.swing.JPanel jpViewer;
    private javax.swing.JRadioButtonMenuItem jrbAlaskaCS;
    private javax.swing.JRadioButtonMenuItem jrbKoreaCS;
    // End of variables declaration//GEN-END:variables
    
}
