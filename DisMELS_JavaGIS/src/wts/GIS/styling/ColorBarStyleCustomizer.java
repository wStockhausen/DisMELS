/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ColorBarStyleCustomizer.java
* 
 * Throws PropertyChangeEvents when the ColorBarStyle bean is changed. Listeners
 * should check the mustUpdateStyle() method on the edited ColorBarStyle bean
 * to see if updateStyle() must be called on the bean before it is "used".
 * 
 * Created on Apr 4, 2009, 10:43:40 AM
 */

package wts.GIS.styling;

import com.wtstockhausen.utils.ColorRamp;
import java.beans.Customizer;
import java.beans.PropertyChangeListener;
import java.util.Iterator;
import java.util.logging.Logger;

/**
 * Customizer class for ColorBarStyles.
 * 
 * Throws PropertyChangeEvents when the ColorBarStyle bean is changed. Listeners
 * should check the mustUpdateStyle() method on the edited ColorBarStyle bean
 * to see if updateStyle() must be called on the bean before it is "used".
 * 
 * @author wstockhausen
 */
public class ColorBarStyleCustomizer extends javax.swing.JPanel
                                     implements Customizer {

    /**property indicating bean settings have been modified in some form */
    public static final String PROP_StyleChanged = "wts.GIS.styling.ColorBarStyleCustomizer: StyleChanged";
            
    /** the bean instance to be customized */
    private ColorBarStyle obj;
    /** flag to enable "input" event processing */
    private boolean enableEvents;
    
    /** class logger */
    private static final Logger logger = Logger.getLogger(ColorBarStyleCustomizer.class.getName());

    /** Creates new form ColorBarStyleCustomizer */
    public ColorBarStyleCustomizer() {
        enableEvents = false;
        initComponents();
        initComponents1();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jtfMinCS = new javax.swing.JTextField();
        jtfMaxCS = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jchkShowLTMin = new javax.swing.JCheckBox();
        jchkShowGTMax = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jspNumColors = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jcbColorRamps = new javax.swing.JComboBox();
        jColorBar = new com.wtstockhausen.beans.swing.JColorBar();

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Color scale"));

        jtfMinCS.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfMinCS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfMinCSActionPerformed(evt);
            }
        });

        jtfMaxCS.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfMaxCS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfMaxCSActionPerformed(evt);
            }
        });

        jLabel1.setText("Min");

        jLabel2.setText("Max");

        jchkShowLTMin.setSelected(true);
        jchkShowLTMin.setText("Show values < min");
        jchkShowLTMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkShowLTMinActionPerformed(evt);
            }
        });

        jchkShowGTMax.setSelected(true);
        jchkShowGTMax.setText("Show values > max");
        jchkShowGTMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkShowGTMaxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jtfMinCS, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2))
                    .addComponent(jchkShowLTMin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jchkShowGTMax)
                    .addComponent(jtfMaxCS, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jtfMaxCS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfMinCS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jchkShowLTMin)
                    .addComponent(jchkShowGTMax)))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel3.setText("# of colors");

        jspNumColors.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jspNumColorsStateChanged(evt);
            }
        });

        jLabel4.setText("Color ramp");

        jcbColorRamps.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbColorRamps.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbColorRampsItemStateChanged(evt);
            }
        });
        jcbColorRamps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbColorRampsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jspNumColors, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel4)
                        .addContainerGap(252, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcbColorRamps, 0, 316, Short.MAX_VALUE))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jspNumColors, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbColorRamps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jColorBar.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jColorBar.setVertical(false);

        javax.swing.GroupLayout jColorBarLayout = new javax.swing.GroupLayout(jColorBar);
        jColorBar.setLayout(jColorBarLayout);
        jColorBarLayout.setHorizontalGroup(
            jColorBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 402, Short.MAX_VALUE)
        );
        jColorBarLayout.setVerticalGroup(
            jColorBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jColorBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jColorBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jtfMinCSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfMinCSActionPerformed
        if (enableEvents) {
            double val = Double.parseDouble(jtfMinCS.getText());
            obj.setMin(val);
            firePropertyChange(PROP_StyleChanged,obj,obj);
        }
    }//GEN-LAST:event_jtfMinCSActionPerformed

    private void jtfMaxCSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfMaxCSActionPerformed
        if (enableEvents) {
            logger.info("max color scale changed on "+obj.toString());
            double val = Double.parseDouble(jtfMaxCS.getText());
            obj.setMax(val);
            firePropertyChange(PROP_StyleChanged,obj,obj);
            logger.info("fired PropertyChangeEvent to:");
            PropertyChangeListener[] pcls = getPropertyChangeListeners();
            for (PropertyChangeListener pcl: pcls){
                logger.info("---"+pcl.toString());
            }
        }
    }//GEN-LAST:event_jtfMaxCSActionPerformed

    private void jspNumColorsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jspNumColorsStateChanged
        if (enableEvents) {
            int nc = ((Integer)jspNumColors.getValue()).intValue();
            obj.setNumberOfColors(nc);
            updateColorBar();
            firePropertyChange(PROP_StyleChanged,obj,obj);
        }
    }//GEN-LAST:event_jspNumColorsStateChanged

    private void jcbColorRampsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbColorRampsItemStateChanged

    }//GEN-LAST:event_jcbColorRampsItemStateChanged

    private void jcbColorRampsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbColorRampsActionPerformed
        if (enableEvents) {
            logger.info("color ramp changed on "+obj.toString());
            String clrRamp = (String) jcbColorRamps.getSelectedItem();
            obj.setColorRamp(clrRamp);
            updateColorBar();
            firePropertyChange(PROP_StyleChanged,obj,obj);
            logger.info("fired PropertyChangeEvent to:");
            PropertyChangeListener[] pcls = getPropertyChangeListeners();
            for (PropertyChangeListener pcl: pcls){
                logger.info("---"+pcl.toString());
            }
        }
    }//GEN-LAST:event_jcbColorRampsActionPerformed

    private void jchkShowLTMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkShowLTMinActionPerformed
        if (enableEvents) {
            obj.setShowLTMin(jchkShowLTMin.isSelected());
            firePropertyChange(PROP_StyleChanged,obj,obj);
        }
    }//GEN-LAST:event_jchkShowLTMinActionPerformed

    private void jchkShowGTMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkShowGTMaxActionPerformed
        if (enableEvents) {
            obj.setShowGTMax(jchkShowGTMax.isSelected());
            firePropertyChange(PROP_StyleChanged,obj,obj);
        }
    }//GEN-LAST:event_jchkShowGTMaxActionPerformed

    private void initComponents1() {
        jcbColorRamps.removeAllItems();//remove default items
        Iterator<String> it = ColorRamp.getRampNames().iterator();
        while (it.hasNext()) jcbColorRamps.addItem(it.next());
        jcbColorRamps.setSelectedIndex(-1);
    }

    private void updateColorBar() {
        jColorBar.setColorRamp(obj.getColorRamp());
        jColorBar.setNumberOfColors(obj.getNumberOfColors());
        jColorBar.repaint();
    }

    @Override
    public void setObject(Object bean) {
        if (bean instanceof ColorBarStyle){
            logger.info("starting setObject() "+bean.toString());
            obj = (ColorBarStyle) bean;
            enableEvents = false;
            jtfMinCS.setText(Double.toString(obj.getMin()));
            jtfMaxCS.setText(Double.toString(obj.getMax()));
            jspNumColors.setValue(obj.getNumberOfColors());
            jcbColorRamps.setSelectedItem(obj.getColorRamp());
            jchkShowLTMin.setSelected(obj.getShowLTMin());
            jchkShowGTMax.setSelected(obj.getShowGTMax());
            updateColorBar();
            enableEvents = true;
            logger.info("finished setObject() "+bean.toString());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.wtstockhausen.beans.swing.JColorBar jColorBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JComboBox jcbColorRamps;
    private javax.swing.JCheckBox jchkShowGTMax;
    private javax.swing.JCheckBox jchkShowLTMin;
    private javax.swing.JSpinner jspNumColors;
    private javax.swing.JTextField jtfMaxCS;
    private javax.swing.JTextField jtfMinCS;
    // End of variables declaration//GEN-END:variables

}
