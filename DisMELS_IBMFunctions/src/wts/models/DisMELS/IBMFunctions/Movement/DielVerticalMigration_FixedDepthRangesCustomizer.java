/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wts.models.DisMELS.IBMFunctions.Movement;

import wts.models.DisMELS.framework.IBMFunctions.IBMParameterBoolean;
import wts.models.DisMELS.framework.IBMFunctions.IBMParameterDouble;
import wts.models.gui.DepthRange_JPanel;

/**
 *
 * @author William.Stockhausen
 */
public class DielVerticalMigration_FixedDepthRangesCustomizer extends javax.swing.JPanel implements java.beans.Customizer {
    
    private DielVerticalMigration_FixedDepthRanges obj = null;;

    /**
     * Creates new customizer DielVerticalMigration_FixedDepthRangesCustomizer
     */
    public DielVerticalMigration_FixedDepthRangesCustomizer() {
        initComponents();
    }
    
    @Override
    public void setObject(Object bean) {
        if (bean instanceof DielVerticalMigration_FixedDepthRanges){
            obj = (DielVerticalMigration_FixedDepthRanges) bean;
            setParameters();
        }
    }

    private void setParameters() {
        drDayTime.setHasPreferredRange(((IBMParameterBoolean)obj.getParameter(DielVerticalMigration_FixedDepthRanges.PARAM_hasPreferredDepthRangeDay)).getValue());
        drDayTime.setMaxDepth(((IBMParameterDouble)obj.getParameter(DielVerticalMigration_FixedDepthRanges.PARAM_maxDepthDay)).getValue());
        drDayTime.setMinDepth(((IBMParameterDouble)obj.getParameter(DielVerticalMigration_FixedDepthRanges.PARAM_minDepthDay)).getValue());
        drDayTime.setWillAttach(((IBMParameterBoolean)obj.getParameter(DielVerticalMigration_FixedDepthRanges.PARAM_willAttachDay)).getValue());
        drNightTime.setHasPreferredRange(((IBMParameterBoolean)obj.getParameter(DielVerticalMigration_FixedDepthRanges.PARAM_hasPreferredDepthRangeNight)).getValue());
        drNightTime.setMaxDepth(((IBMParameterDouble)obj.getParameter(DielVerticalMigration_FixedDepthRanges.PARAM_maxDepthNight)).getValue());
        drNightTime.setMinDepth(((IBMParameterDouble)obj.getParameter(DielVerticalMigration_FixedDepthRanges.PARAM_minDepthNight)).getValue());
        drNightTime.setWillAttach(((IBMParameterBoolean)obj.getParameter(DielVerticalMigration_FixedDepthRanges.PARAM_willAttachNight)).getValue());
        jtfRPW.setText(((IBMParameterDouble)obj.getParameter(DielVerticalMigration_FixedDepthRanges.PARAM_rpw)).getValueAsString());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        drDayTime = new wts.models.gui.DepthRange_JPanel();
        drNightTime = new wts.models.gui.DepthRange_JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jtfRPW = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        drDayTime.setTitle("Daytime");
        drDayTime.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                drDayTimePropertyChange(evt);
            }
        });

        drNightTime.setTitle("Nighttime");
        drNightTime.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                drNightTimePropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(drDayTime, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(drNightTime, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(drDayTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(drNightTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jScrollPane1.setViewportView(jPanel1);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jtfRPW.setText("0.0");
        jtfRPW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfRPWActionPerformed(evt);
            }
        });

        jLabel1.setText("Random walk parameter (m^2/s)");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtfRPW, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfRPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel3.add(jPanel2, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void drDayTimePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_drDayTimePropertyChange
        if (evt.getPropertyName().equalsIgnoreCase(DepthRange_JPanel.PROP_hasPreferredRange)) {
            if (evt.getNewValue() instanceof Boolean) {
                Boolean b = ((Boolean) evt.getNewValue());
                obj.setParameterValue(DielVerticalMigration_FixedDepthRanges.PARAM_hasPreferredDepthRangeDay, b);
            }
        } else if (evt.getPropertyName().equalsIgnoreCase(DepthRange_JPanel.PROP_maxDepth)) {
            if (evt.getNewValue() instanceof Double) {
                Double d = ((Double) evt.getNewValue());
                obj.setParameterValue(DielVerticalMigration_FixedDepthRanges.PARAM_maxDepthDay, d);
            }
        } else if (evt.getPropertyName().equalsIgnoreCase(DepthRange_JPanel.PROP_minDepth)) {
            if (evt.getNewValue() instanceof Double) {
                Double d = ((Double) evt.getNewValue());
                obj.setParameterValue(DielVerticalMigration_FixedDepthRanges.PARAM_minDepthDay, d);
            }
        } else if (evt.getPropertyName().equalsIgnoreCase(DepthRange_JPanel.PROP_willAttach)) {
            if (evt.getNewValue() instanceof Boolean) {
                Boolean b = ((Boolean) evt.getNewValue());
                obj.setParameterValue(DielVerticalMigration_FixedDepthRanges.PARAM_willAttachDay, b);
            }
        }
    }//GEN-LAST:event_drDayTimePropertyChange

    private void drNightTimePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_drNightTimePropertyChange
        if (evt.getPropertyName().equalsIgnoreCase(DepthRange_JPanel.PROP_hasPreferredRange)) {
            if (evt.getNewValue() instanceof Boolean) {
                Boolean b = ((Boolean) evt.getNewValue());
                obj.setParameterValue(DielVerticalMigration_FixedDepthRanges.PARAM_hasPreferredDepthRangeNight, b);
            }
        } else if (evt.getPropertyName().equalsIgnoreCase(DepthRange_JPanel.PROP_maxDepth)) {
            if (evt.getNewValue() instanceof Double) {
                Double d = ((Double) evt.getNewValue());
                obj.setParameterValue(DielVerticalMigration_FixedDepthRanges.PARAM_maxDepthNight, d);
            }
        } else if (evt.getPropertyName().equalsIgnoreCase(DepthRange_JPanel.PROP_minDepth)) {
            if (evt.getNewValue() instanceof Double) {
                Double d = ((Double) evt.getNewValue());
                obj.setParameterValue(DielVerticalMigration_FixedDepthRanges.PARAM_minDepthNight, d);
            }
        } else if (evt.getPropertyName().equalsIgnoreCase(DepthRange_JPanel.PROP_willAttach)) {
            if (evt.getNewValue() instanceof Boolean) {
                Boolean b = ((Boolean) evt.getNewValue());
                obj.setParameterValue(DielVerticalMigration_FixedDepthRanges.PARAM_willAttachNight, b);
            }
        }
    }//GEN-LAST:event_drNightTimePropertyChange

    private void jtfRPWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfRPWActionPerformed
        String str = jtfRPW.getText();
        Double val = Double.parseDouble(str);
        obj.setParameterValue(DielVerticalMigration_FixedDepthRanges.PARAM_rpw, val);
    }//GEN-LAST:event_jtfRPWActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private wts.models.gui.DepthRange_JPanel drDayTime;
    private wts.models.gui.DepthRange_JPanel drNightTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jtfRPW;
    // End of variables declaration//GEN-END:variables
}
