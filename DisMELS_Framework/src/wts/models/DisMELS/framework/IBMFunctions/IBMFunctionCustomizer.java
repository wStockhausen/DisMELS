/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wts.models.DisMELS.framework.IBMFunctions;

import java.awt.BorderLayout;
import java.beans.*;
import java.util.Set;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author William.Stockhausen
 */
public class IBMFunctionCustomizer extends javax.swing.JPanel 
                                             implements Customizer {

    private static final Logger logger = Logger.getLogger(IBMFunctionCustomizer.class.getName());
    
    private IBMFunctionInterface obj = null;
    
    /**
     * Creates new form IBMFunctionCustomizer
     */
    public IBMFunctionCustomizer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jpParameters = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        setLayout(new java.awt.BorderLayout());

        jTabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jpParameters.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(jPanel1);

        jpParameters.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane.addTab(org.openide.util.NbBundle.getMessage(IBMFunctionCustomizer.class, "IBMFunctionCustomizer.jpParameters.TabConstraints.tabTitle"), null, jpParameters, org.openide.util.NbBundle.getMessage(IBMFunctionCustomizer.class, "IBMFunctionCustomizer.jpParameters.TabConstraints.tabToolTip")); // NOI18N

        add(jTabbedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel jPanel1;
    protected javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JTabbedPane jTabbedPane;
    protected javax.swing.JPanel jpParameters;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setObject(Object bean) {
        if (bean instanceof IBMFunctionInterface){
            obj = (IBMFunctionInterface) bean;
            try {
                constructUI();
            } catch (Exception exc){
                logger.warning(exc.getMessage());
                throw(exc);
            }
        } else {
            logger.warning("Attempted to construct IBMFunctionCustomizer using object of class "+bean.getClass().getName());
        }
    }
    
    private void constructUI(){
        logger.info("Constructing UI for "+obj.getClass().getSimpleName()+" ("+obj.getFunctionName()+")");
        this.removeAll();//remove all components
        
        try {
            //get predefined customizer for the object
            logger.info("trying to get predefined customizer.");
            BeanInfo bi = Introspector.getBeanInfo(obj.getClass());
            BeanDescriptor bd = bi.getBeanDescriptor();
            Class cClass = bd.getCustomizerClass();
            Customizer customizer = (Customizer) cClass.newInstance();
            customizer.setObject(obj);
            logger.info("got predefined customizer.");
            ((JPanel)customizer).setToolTipText(obj.getDescription());
            this.add((JPanel) customizer,BorderLayout.CENTER);
        } catch (IntrospectionException|InstantiationException|IllegalAccessException|NullPointerException ex){
            //construct a customizer from scratch
            logger.info("--constructing customizer from scratch.");
            constructCustomizer();
        }
        
        this.validate();
        this.repaint();
    }
    
    private void constructCustomizer(){
//        TitledBorder tb = BorderFactory.createTitledBorder(obj.getFunctionType()+": "+obj.getFunctionName());
        this.setBorder(BorderFactory.createTitledBorder(""));
        this.setToolTipText(obj.getDescription());
        
        jTabbedPane = new javax.swing.JTabbedPane();
        jTabbedPane.setToolTipText(obj.getDescription());
        
        Set<String> pKeys = obj.getParameterNames();
        Set<String> fKeys = obj.getSubfunctionNames();
        if (pKeys.isEmpty()&&fKeys.isEmpty()){
            //Construct tab for full description
            JPanel jpDescr = new JPanel();
            jpDescr.setLayout(new java.awt.BorderLayout());        
            jTabbedPane.addTab("Description", jpDescr); // NOI18N

            JScrollPane jspD = new JScrollPane();
            jspD.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            jspD.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            jpDescr.add(jspD,BorderLayout.CENTER);
            JPanel jp1 = new JPanel(new BorderLayout());
            jspD.setViewportView(jp1);
            JTextArea jta = new JTextArea();
            jta.setText("\nno settable parameters or subfunctions \ndefined for this function\n"+obj.getFullDescription());
            jta.setToolTipText(obj.getDescription());
            jta.setEditable(false);
            jp1.add(jta,BorderLayout.NORTH);
            return;
        } else {
            this.add(jTabbedPane, java.awt.BorderLayout.CENTER);
        }
        if (!pKeys.isEmpty()){
            //Construct tab for function parameters
            jpParameters = new JPanel();
            jpParameters.setLayout(new java.awt.BorderLayout());        
            jTabbedPane.addTab("Parameters", jpParameters); // NOI18N

            JScrollPane jspP = new JScrollPane();
            jspP.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            jspP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            jpParameters.add(jspP,BorderLayout.CENTER);

            JPanel jp1 = new JPanel();
            jp1.setLayout(new BorderLayout());
            jspP.setViewportView(jp1);
            for (String pKey: pKeys) {
                logger.info("constructing customizer for parameter key "+pKey);
                IBMParameter ifp = obj.getParameter(pKey);
                JPanel jp = new JPanel(new BorderLayout());
                jp.setToolTipText(obj.getDescription());
                jp1.add(jp,BorderLayout.CENTER);
                try {
                    BeanInfo bi = Introspector.getBeanInfo(ifp.getClass());
                    BeanDescriptor bd = bi.getBeanDescriptor();
                    Class cClass = bd.getCustomizerClass();
                    Customizer czr = (Customizer) cClass.newInstance();
                    czr.setObject(ifp);
                    jp.add((JPanel) czr,BorderLayout.NORTH);
                } catch (IntrospectionException|InstantiationException|IllegalAccessException ex){}
                jp1 = jp;
            }
        }
        
        //Construct tabs for subfunctions
        if (!fKeys.isEmpty()){
            for (String fKey: fKeys) {
                logger.info("constructing customizer for subfunction key "+fKey);
                IBMFunctionInterface ifi = obj.getSubfunction(fKey);
                JPanel jpF = new JPanel(new BorderLayout());
                jTabbedPane.addTab("Subfunction: "+ifi.getFunctionName(), jpF); // NOI18N
                JScrollPane jspF = new JScrollPane();
                jspF.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                jspF.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
                jpF.add(jspF,BorderLayout.CENTER);

                JPanel jpFV = new JPanel(new BorderLayout());
                jspF.setViewportView(jpFV);
                Customizer czr;
                try {
                    //use predefined constructor
                    BeanInfo bi = Introspector.getBeanInfo(ifi.getClass());
                    BeanDescriptor bd = bi.getBeanDescriptor();
                    Class cClass = bd.getCustomizerClass();
                    czr = (Customizer) cClass.newInstance();
                } catch (IntrospectionException|InstantiationException|IllegalAccessException|NullPointerException ex){
                    //construct generic customizer
                    czr = new IBMFunctionCustomizer();
                }
                czr.setObject(ifi);
                jpFV.add((JPanel) czr,BorderLayout.NORTH);
            }
        }
        
        //Construct tab for full description
        JPanel jpDescr = new JPanel();
        jpDescr.setLayout(new java.awt.BorderLayout());        
        jTabbedPane.addTab("Description", jpDescr); // NOI18N

        JScrollPane jspD = new JScrollPane();
        jspD.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jspD.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        jpDescr.add(jspD,BorderLayout.CENTER);
        JPanel jp1 = new JPanel(new BorderLayout());
        jspD.setViewportView(jp1);
        JTextArea jta = new JTextArea();
        jta.setText(obj.getFullDescription());
        jta.setToolTipText(obj.getDescription());
        jta.setEditable(false);
        jp1.add(jta,BorderLayout.NORTH);        
    }
}
