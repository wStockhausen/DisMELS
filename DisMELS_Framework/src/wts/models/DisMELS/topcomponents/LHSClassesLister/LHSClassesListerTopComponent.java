/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wts.models.DisMELS.topcomponents.LHSClassesLister;

import java.util.Iterator;
import java.util.TreeSet;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import wts.models.DisMELS.framework.GlobalInfo;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//wts.models.DisMELS.topcomponents.LHSClassesLister//LHSClassesLister//EN",
autostore = false)
@TopComponent.Description(preferredID = "LHSClassesListerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "wts.models.DisMELS.topcomponents.LHSClassesLister.LHSClassesListerTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_LHSClassesListerAction",
preferredID = "LHSClassesListerTopComponent")
@Messages({
    "CTL_LHSClassesListerAction=Life stage classes",
    "CTL_LHSClassesListerTopComponent=Java classes for IBM Life Stages",
    "HINT_LHSClassesListerTopComponent=These are the available classes for IBM life stages."
})
public final class LHSClassesListerTopComponent extends TopComponent implements LookupListener {
    
    private GlobalInfo globalInfo = null;

    public LHSClassesListerTopComponent() {
        initComponents();
        setName(Bundle.CTL_LHSClassesListerTopComponent());
        setToolTipText(Bundle.HINT_LHSClassesListerTopComponent());
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        globalInfo = GlobalInfo.getInstance();
        globalInfo.addLookupListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtaClasses = new javax.swing.JTextArea();

        setToolTipText(org.openide.util.NbBundle.getMessage(LHSClassesListerTopComponent.class, "LHSClassesListerTopComponent.toolTipText")); // NOI18N
        setName(org.openide.util.NbBundle.getMessage(LHSClassesListerTopComponent.class, "LHSClassesListerTopComponent.name")); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jtaClasses.setColumns(20);
        jtaClasses.setRows(5);
        jScrollPane1.setViewportView(jtaClasses);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jtaClasses;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        writeText();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        writeText();
    }
    
    private void writeText(){
        globalInfo = GlobalInfo.getInstance();
        jtaClasses.setText(null);//reset any old text
        TreeSet<String> classes = new TreeSet<>();//use TreeSet to get an ordered list of classes
        for (Class c: globalInfo.getLHSClasses()){
            classes.add(c.getName());
        }
        Iterator<String> it = classes.iterator();
        while (it.hasNext()){
            jtaClasses.append("\t"+it.next()+"\n");
        }
    }
}
