/*
 * ModelControllerBeanCustomizer.java
 *
 * Created on January 4, 2006, 2:44 PM
 */

package wts.models.DisMELS.gui;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.File;
import java.io.IOException;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;
import wts.models.DisMELS.framework.GlobalInfo;
import wts.models.DisMELS.framework.ModelControllerBean;
import wts.models.utilities.CalendarIF;
import wts.models.utilities.ModelCalendar;
import wts.roms.model.Interpolator3D;
import wts.roms.model.LagrangianParticleTracker;
import wts.roms.model.NetcdfReader;
import wts.roms.model.PhysicalEnvironment;

/**
 * @author William Stockhausen
 */
public class ModelControllerBeanCustomizer extends javax.swing.JPanel 
                                           implements java.beans.Customizer {
    
    /** id for all changes to ModelControllerBean object through the customizer. */
    public static final String PROP_CHANGE = "property change";
    
    /** ModelControllerBea instance */
    private ModelControllerBean mcb = new ModelControllerBean();
    
    /** flag to fire property changes */
    private boolean fireChanges = false;
    /** support for property changes */
    private PropertyChangeSupport propertySupport = null;
    
    /** flag to do actions associated with changing values */
    private boolean doActions = true;
    
    /** Creates new customizer ModelControllerBeanCustomizer */
    public ModelControllerBeanCustomizer() {
        initComponents();
        jfbDataset.addFileFilter("nc","ROMS netCDF model dataset");
        jfbInitialAttributes.addFileFilter("csv","CSV file");
        jfbParams.addFileFilter("csv","CSV file");
        jfbParams.addFileFilter("xml","XML file");
        jfbResults.addFileFilter("csv","CSV file");
        jfbConnectivityResults.addFileFilter("csv","CSV file");
        setWorkingDir(GlobalInfo.getInstance().getWorkingDir());
        setROMSDir(GlobalInfo.getInstance().getCanonicalFile());
        propertySupport = new PropertyChangeSupport(this);
    }

    public void setWorkingDir(String wdFN) {
        File f = new File(wdFN);
        jfbInitialAttributes.setCurrentDirectory(f);
        jfbParams.setCurrentDirectory(f);
        jfbResults.setCurrentDirectory(f);
        jfbConnectivityResults.setCurrentDirectory(f);
        jfbInitialAttributes.useRelativePath(wdFN);
        jfbParams.useRelativePath(wdFN);
        jfbResults.useRelativePath(wdFN);
        jfbConnectivityResults.useRelativePath(wdFN);
    }
    
    /**
     * Sets 
     * @param romsFN 
     */
    public void setROMSDir(String romsFN){
        File f = new File(romsFN);
        jfbDataset.setCurrentDirectory(f);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jfbDataset = new com.wtstockhausen.beans.swing.JFilenameBean();
        jfbParams = new com.wtstockhausen.beans.swing.JFilenameBean();
        jfbInitialAttributes = new com.wtstockhausen.beans.swing.JFilenameBean();
        jfbResults = new com.wtstockhausen.beans.swing.JFilenameBean();
        jfbConnectivityResults = new com.wtstockhausen.beans.swing.JFilenameBean();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfStartTime = new javax.swing.JTextField();
        jtfStartDate = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtfTimeStep = new javax.swing.JTextField();
        jtfNT = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jtfNLTP = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtfResRate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jtfAnimRate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jtfStageTransRate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jtfRngSeed = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jcbRunInReverse = new javax.swing.JCheckBox();
        jcbNoVerticalMotion = new javax.swing.JCheckBox();
        jcbNoAdvection = new javax.swing.JCheckBox();
        jcbFixedEnvironment = new javax.swing.JCheckBox();
        jcbMaskLikeROMS = new javax.swing.JCheckBox();
        jcbInterpolateLikeROMS = new javax.swing.JCheckBox();
        jcbUpdateLayerDepthsLikeROMS = new javax.swing.JCheckBox();
        jcbShowDeadIndivs = new javax.swing.JCheckBox();
        jcbExcludeTracks = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jPanel1.setLayout(new java.awt.GridLayout(6, 0));

        jfbDataset.setLabel("ROMS Dataset");
        jfbDataset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jfbDatasetActionPerformed(evt);
            }
        });
        jPanel1.add(jfbDataset);

        jfbParams.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "LHS parameters definition file", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP));
        jfbParams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jfbParamsActionPerformed(evt);
            }
        });
        jPanel1.add(jfbParams);

        jfbInitialAttributes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "LHS initial attributes file", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP));
        jfbInitialAttributes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jfbInitialAttributesActionPerformed(evt);
            }
        });
        jPanel1.add(jfbInitialAttributes);

        jfbResults.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Results file", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP));
        jfbResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jfbResultsActionPerformed(evt);
            }
        });
        jPanel1.add(jfbResults);

        jfbConnectivityResults.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Connectivity results file", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP));
        jfbConnectivityResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jfbConnectivityResultsActionPerformed(evt);
            }
        });
        jPanel1.add(jfbConnectivityResults);

        jTabbedPane1.addTab("Files", jPanel1);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Start time"));
        jPanel3.setPreferredSize(new java.awt.Dimension(418, 82));

        jLabel1.setText("ROMS ocean time (s)");

        jtfStartTime.setText("0");
        jtfStartTime.setToolTipText("start time as ROMS ocean time (in s)");
        jtfStartTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfStartTimeActionPerformed(evt);
            }
        });

        jtfStartDate.setToolTipText("strart time as date (YYYY-MM-DD hh:mm:ss)");
        jtfStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfStartDateActionPerformed(evt);
            }
        });

        jLabel9.setText("Date");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel9)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jtfStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 248, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jtfStartTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 248, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jtfStartTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jtfStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Environmental model"));

        jLabel2.setText("Time step (s)");

        jLabel3.setText("# of steps");

        jtfTimeStep.setText("1.0");
        jtfTimeStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfTimeStepActionPerformed(evt);
            }
        });

        jtfNT.setText("1");
        jtfNT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfNTActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jtfNT, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jtfTimeStep))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jtfTimeStep, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jtfNT, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Biological model"));

        jLabel4.setText("# of steps");

        jtfNLTP.setText("1");
        jtfNLTP.setToolTipText("# time steps per environmental model time step");
        jtfNLTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfNLTPActionPerformed(evt);
            }
        });

        jLabel5.setText("Result rate");

        jtfResRate.setText("1");
        jtfResRate.setToolTipText("rate at which to write results to disk");
        jtfResRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfResRateActionPerformed(evt);
            }
        });

        jLabel6.setText("Animation rate");

        jtfAnimRate.setText("1");
        jtfAnimRate.setToolTipText("rate at which to update animation");
        jtfAnimRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfAnimRateActionPerformed(evt);
            }
        });

        jLabel7.setText("Stage trans. rate");

        jtfStageTransRate.setText("1");
        jtfStageTransRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfStageTransRateActionPerformed(evt);
            }
        });

        jLabel8.setText("RNG seed");

        jtfRngSeed.setText("-1");
        jtfRngSeed.setToolTipText("set >0 to set seed");
        jtfRngSeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfRngSeedActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(jLabel5)
                    .add(jLabel6)
                    .add(jLabel7)
                    .add(jLabel8))
                .add(11, 11, 11)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jtfRngSeed)
                    .add(jtfStageTransRate)
                    .add(jtfAnimRate)
                    .add(jtfResRate)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jtfNLTP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE))
                .addContainerGap(153, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jtfNLTP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jtfResRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jtfAnimRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(jtfStageTransRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jtfRngSeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(12, 12, 12)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Run parameters", jPanel2);

        jcbRunInReverse.setText("Run model in reverse");
        jcbRunInReverse.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jcbRunInReverse.setMaximumSize(new java.awt.Dimension(143, 25));
        jcbRunInReverse.setMinimumSize(new java.awt.Dimension(143, 25));
        jcbRunInReverse.setPreferredSize(new java.awt.Dimension(143, 25));
        jcbRunInReverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRunInReverseActionPerformed(evt);
            }
        });

        jcbNoVerticalMotion.setSelected(LagrangianParticleTracker.noVerticalMotion);
        jcbNoVerticalMotion.setText("No vertical motion");
        jcbNoVerticalMotion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbNoVerticalMotionItemStateChanged(evt);
            }
        });

        jcbNoAdvection.setText("No advection");
        jcbNoAdvection.setToolTipText("Sets model currents to 0");
        jcbNoAdvection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbNoAdvectionItemStateChanged(evt);
            }
        });

        jcbFixedEnvironment.setText("Use fixed envrironment");
        jcbFixedEnvironment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFixedEnvironmentItemStateChanged(evt);
            }
        });

        jcbMaskLikeROMS.setSelected(LagrangianParticleTracker.maskLikeROMS);
        jcbMaskLikeROMS.setText("Use rho-mask for u,v interpolation (like ROMS)");
        jcbMaskLikeROMS.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbMaskLikeROMSItemStateChanged(evt);
            }
        });

        jcbInterpolateLikeROMS.setSelected(Interpolator3D.interpolateLikeROMS);
        jcbInterpolateLikeROMS.setText("Interpolate like ROMS");
        jcbInterpolateLikeROMS.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbInterpolateLikeROMSItemStateChanged(evt);
            }
        });

        jcbUpdateLayerDepthsLikeROMS.setSelected(PhysicalEnvironment.updateLayerDepthsLikeROMS);
        jcbUpdateLayerDepthsLikeROMS.setText("Update layer depths like ROMS");
        jcbUpdateLayerDepthsLikeROMS.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbUpdateLayerDepthsLikeROMSItemStateChanged(evt);
            }
        });

        jcbShowDeadIndivs.setText("Show dead individuals");
        jcbShowDeadIndivs.setToolTipText("plot end points, tracks for dead individuals");
        jcbShowDeadIndivs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbShowDeadIndivsItemStateChanged(evt);
            }
        });

        jcbExcludeTracks.setText("Exclude tracks from model results");
        jcbExcludeTracks.setToolTipText("Check to exclude track info from model results file");
        jcbExcludeTracks.setActionCommand("");
        jcbExcludeTracks.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbExcludeTracksItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jcbExcludeTracks)
                    .add(jcbNoVerticalMotion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jcbFixedEnvironment)
                    .add(jcbMaskLikeROMS)
                    .add(jcbInterpolateLikeROMS)
                    .add(jcbUpdateLayerDepthsLikeROMS)
                    .add(jcbShowDeadIndivs)
                    .add(jcbNoAdvection)
                    .add(jcbRunInReverse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jcbRunInReverse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jcbNoVerticalMotion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jcbNoAdvection)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jcbFixedEnvironment)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jcbMaskLikeROMS)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jcbInterpolateLikeROMS)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jcbUpdateLayerDepthsLikeROMS)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jcbShowDeadIndivs)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jcbExcludeTracks)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Options", jPanel6);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jtfRngSeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfRngSeedActionPerformed
        long n = Long.parseLong(jtfRngSeed.getText());
        mcb.setRandomNumberSeed(n);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jtfRngSeedActionPerformed

    private void jtfStageTransRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfStageTransRateActionPerformed
        int n = Integer.parseInt(jtfStageTransRate.getText());
        mcb.setStageTransitionRate(n);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jtfStageTransRateActionPerformed

    private void jfbParamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jfbParamsActionPerformed
        mcb.setFile_Params(jfbParams.getFilename());
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jfbParamsActionPerformed

    private void jtfAnimRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfAnimRateActionPerformed
        int n = Integer.parseInt(jtfAnimRate.getText());
        mcb.setAnimationRate(n);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jtfAnimRateActionPerformed

    private void jtfResRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfResRateActionPerformed
        int n = Integer.parseInt(jtfResRate.getText());
        mcb.setResultsRate(n);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jtfResRateActionPerformed

    private void jcbRunInReverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRunInReverseActionPerformed
        boolean b   = !jcbRunInReverse.isSelected();
        mcb.setRunForward(b);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jcbRunInReverseActionPerformed

    private void jfbResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jfbResultsActionPerformed
        String nfn = jfbResults.getFilename();
        mcb.setFile_Results(nfn);       
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jfbResultsActionPerformed

    private void jfbInitialAttributesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jfbInitialAttributesActionPerformed
        String nfn = jfbInitialAttributes.getFilename();
        mcb.setFile_InitialAttributes(nfn);       
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jfbInitialAttributesActionPerformed

    private void jfbDatasetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jfbDatasetActionPerformed
        String nfn = jfbDataset.getFilename();
        mcb.setFile_ROMSDataset(nfn);       
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jfbDatasetActionPerformed

    private void jtfNLTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfNLTPActionPerformed
        //Set number of time steps for particle tracking integration
        //(per envrinmental model time step).
        int n = Integer.parseInt(jtfNLTP.getText());
        mcb.setNtBioModel(n);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jtfNLTPActionPerformed

    private void jtfNTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfNTActionPerformed
        //Set number of time steps for envrinmental model
        int n = Integer.parseInt(jtfNT.getText());
        mcb.setNtEnvironModel(n);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jtfNTActionPerformed

    private void jtfTimeStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfTimeStepActionPerformed
        //Set time step
        double n = Double.parseDouble(jtfTimeStep.getText());
        mcb.setTimeStep(n);        
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jtfTimeStepActionPerformed

    private void jtfStartTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfStartTimeActionPerformed
        //Set model start time
        try {
            if (doActions){
                System.out.println("Setting start time "+jtfStartTime.getText());
                double n = Double.parseDouble(jtfStartTime.getText());
                mcb.setStartTime(n);
                ModelCalendar.getCalendar().setTimeOffset((long) n);
                doActions = false;
                jtfStartDate.setText(ModelCalendar.getCalendar().getDateTimeString());
                doActions = true;
            }
            if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
        } catch (NumberFormatException ex){
            NotifyDescriptor nd = new NotifyDescriptor.Message("Invalid start time (not a number)!");
            DialogDisplayer.getDefault().notify(nd);
            doActions = true;
        }
    }//GEN-LAST:event_jtfStartTimeActionPerformed

    private void jcbUpdateLayerDepthsLikeROMSItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbUpdateLayerDepthsLikeROMSItemStateChanged
        boolean b   = jcbUpdateLayerDepthsLikeROMS.isSelected();
        mcb.setUpdateLayerDepthsLikeROMS(b);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jcbUpdateLayerDepthsLikeROMSItemStateChanged

    private void jcbInterpolateLikeROMSItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbInterpolateLikeROMSItemStateChanged
        boolean b   = jcbInterpolateLikeROMS.isSelected();
        mcb.setInterpolateLikeROMS(b);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jcbInterpolateLikeROMSItemStateChanged

    private void jcbMaskLikeROMSItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbMaskLikeROMSItemStateChanged
        boolean b   = jcbMaskLikeROMS.isSelected();
        mcb.setMaskLikeROMS(b);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jcbMaskLikeROMSItemStateChanged

    private void jcbFixedEnvironmentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFixedEnvironmentItemStateChanged
        boolean b   = jcbFixedEnvironment.isSelected();
        mcb.setFixedEnvironment(b);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jcbFixedEnvironmentItemStateChanged

    private void jcbNoVerticalMotionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbNoVerticalMotionItemStateChanged
        boolean b   = jcbNoVerticalMotion.isSelected();
        mcb.setNoVerticalMotion(b);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jcbNoVerticalMotionItemStateChanged

    private void jcbShowDeadIndivsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbShowDeadIndivsItemStateChanged
        boolean b  = jcbShowDeadIndivs.isSelected();
        mcb.setShowDeadIndivs(b);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jcbShowDeadIndivsItemStateChanged

    private void jtfStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfStartDateActionPerformed
        try {
            if (doActions){
                doActions = false;
                System.out.println("Setting start date "+jtfStartDate.getText());
                String[] strp = jtfStartDate.getText().split(" ");//split date/time
                String[] strd = strp[0].split("-");//split date part
                String[] strt = strp[1].split(":");//split time part
                int yr = Integer.parseInt(strd[0]);
                int mo = Integer.parseInt(strd[1]);
                int dy = Integer.parseInt(strd[2]);
                int hr = Integer.parseInt(strt[0]);
                int mi = Integer.parseInt(strt[1]);
                int sc = Integer.parseInt(strt[2]);
                ModelCalendar.getCalendar().setDate(yr, mo, dy, hr, mi, sc);
                double v = ModelCalendar.getCalendar().getTimeOffset();
                jtfStartTime.setText(Long.toString((long)v));
                mcb.setStartTime(v);
                doActions = true;
                if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException ex){
            NotifyDescriptor nd = new NotifyDescriptor.Message("Invalid date format!");
            DialogDisplayer.getDefault().notify(nd);
            doActions = true;
        }
    }//GEN-LAST:event_jtfStartDateActionPerformed

    private void jcbNoAdvectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbNoAdvectionItemStateChanged
        boolean b   = jcbNoAdvection.isSelected();
        mcb.setNoAdvection(b);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);

    }//GEN-LAST:event_jcbNoAdvectionItemStateChanged

    private void jfbConnectivityResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jfbConnectivityResultsActionPerformed
        String wdFN = GlobalInfo.getInstance().getWorkingDir();
        String nfn = jfbConnectivityResults.getFilename();
        mcb.setFile_ConnResults(nfn);       
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jfbConnectivityResultsActionPerformed

    private void jcbExcludeTracksItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbExcludeTracksItemStateChanged
        boolean b = jcbExcludeTracks.isSelected();
        mcb.setIncludeTracksInOutput(!b);
        if (fireChanges) propertySupport.firePropertyChange(PROP_CHANGE,null,null);
    }//GEN-LAST:event_jcbExcludeTracksItemStateChanged
    
    public ModelControllerBean getNewController() {
        ModelControllerBean mcb1 = new ModelControllerBean();
        mcb1.setFile_ROMSDataset(jfbDataset.getFilename());
        mcb1.setFile_InitialAttributes(jfbInitialAttributes.getFilename());
        mcb1.setFile_Params(jfbParams.getFilename());
        mcb1.setFile_Results(jfbResults.getFilename());
        mcb1.setFile_ConnResults(jfbConnectivityResults.getFilename());
        mcb1.setStartTime(Double.parseDouble(jtfStartTime.getText()));
        mcb1.setTimeStep(Double.parseDouble(jtfTimeStep.getText()));
        mcb1.setNtEnvironModel(Integer.parseInt(jtfNT.getText()));
        mcb1.setNtBioModel(Integer.parseInt(jtfNLTP.getText()));
        mcb1.setAnimationRate(Integer.parseInt(jtfAnimRate.getText()));
        mcb1.setResultsRate(Integer.parseInt(jtfResRate.getText()));
        mcb1.setStageTransitionRate(Integer.parseInt(jtfStageTransRate.getText()));
        mcb1.setRandomNumberSeed(Long.parseLong(jtfRngSeed.getText()));
        mcb1.setRunForward(!jcbRunInReverse.isSelected());
        mcb1.setFixedEnvironment(jcbFixedEnvironment.isSelected());
        mcb1.setInterpolateLikeROMS(jcbInterpolateLikeROMS.isSelected());
        mcb1.setMaskLikeROMS(jcbMaskLikeROMS.isSelected());
        mcb1.setNoVerticalMotion(jcbNoVerticalMotion.isSelected());
        mcb1.setUpdateLayerDepthsLikeROMS(jcbUpdateLayerDepthsLikeROMS.isSelected());
        mcb1.setShowDeadIndivs(jcbShowDeadIndivs.isSelected());
        mcb1.setIncludeTracksInOutput(!jcbExcludeTracks.isSelected());
        return mcb1;
    }

    @Override
    public void setObject(Object bean) {
        if (bean instanceof ModelControllerBean) {
            mcb = (ModelControllerBean) bean;
            fireChanges = false;
            if (ModelCalendar.getCalendar()==null){
                try {
                    NetcdfReader netcdfReader = new NetcdfReader(GlobalInfo.getInstance().getCanonicalFile());
                    CalendarIF cal = netcdfReader.getCalendar();
                    ModelCalendar.setCalendar(cal);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
            if (mcb.getFile_ROMSDataset()!=null)
                jfbDataset.setFilename(mcb.getFile_ROMSDataset());
            if (mcb.getFile_InitialAttributes()!=null)
                jfbInitialAttributes.setFilename(mcb.getFile_InitialAttributes());
            if (mcb.getFile_Params()!=null)
                jfbParams.setFilename(mcb.getFile_Params());
            if (mcb.getFile_Results()!=null)
                jfbResults.setFilename(mcb.getFile_Results());
            if (mcb.getFile_ConnResults()!=null)
                jfbConnectivityResults.setFilename(mcb.getFile_ConnResults());
            jtfStartTime.setText(""+mcb.getStartTime());
            jtfTimeStep.setText(""+mcb.getTimeStep());
            jtfNT.setText(""+mcb.getNtEnvironModel());
            jtfNLTP.setText(""+mcb.getNtBioModel());
            jtfAnimRate.setText(""+mcb.getAnimationRate());
            jtfResRate.setText(""+mcb.getResultsRate());
            jtfStageTransRate.setText(""+mcb.getStageTransitionRate());
            jtfRngSeed.setText(""+mcb.getRandomNumberSeed());
            jcbRunInReverse.setSelected(!mcb.isRunForward());
            jcbFixedEnvironment.setSelected(mcb.isFixedEnvironment());
            jcbInterpolateLikeROMS.setSelected(mcb.isInterpolateLikeROMS());
            jcbMaskLikeROMS.setSelected(mcb.isMaskLikeROMS());
            jcbNoVerticalMotion.setSelected(mcb.isNoVerticalMotion());
            jcbUpdateLayerDepthsLikeROMS.setSelected(mcb.isUpdateLayerDepthsLikeROMS());
            jcbShowDeadIndivs.setSelected(mcb.getShowDeadIndivs());
            jcbExcludeTracks.setSelected(!mcb.getIncludeTracksInOutput());
            fireChanges = true;
        }
    }
    
    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener){
        if (propertySupport==null) {
            super.addPropertyChangeListener(listener);
        } else {
            propertySupport.addPropertyChangeListener(listener);
        }
    }
    
    @Override
    public void removePropertyChangeListener(PropertyChangeListener listener){
        if (propertySupport==null) {
            super.removePropertyChangeListener(listener);
        } else {
            propertySupport.removePropertyChangeListener(listener);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox jcbExcludeTracks;
    private javax.swing.JCheckBox jcbFixedEnvironment;
    private javax.swing.JCheckBox jcbInterpolateLikeROMS;
    private javax.swing.JCheckBox jcbMaskLikeROMS;
    private javax.swing.JCheckBox jcbNoAdvection;
    private javax.swing.JCheckBox jcbNoVerticalMotion;
    private javax.swing.JCheckBox jcbRunInReverse;
    private javax.swing.JCheckBox jcbShowDeadIndivs;
    private javax.swing.JCheckBox jcbUpdateLayerDepthsLikeROMS;
    private com.wtstockhausen.beans.swing.JFilenameBean jfbConnectivityResults;
    private com.wtstockhausen.beans.swing.JFilenameBean jfbDataset;
    private com.wtstockhausen.beans.swing.JFilenameBean jfbInitialAttributes;
    private com.wtstockhausen.beans.swing.JFilenameBean jfbParams;
    private com.wtstockhausen.beans.swing.JFilenameBean jfbResults;
    private javax.swing.JTextField jtfAnimRate;
    private javax.swing.JTextField jtfNLTP;
    private javax.swing.JTextField jtfNT;
    private javax.swing.JTextField jtfResRate;
    private javax.swing.JTextField jtfRngSeed;
    private javax.swing.JTextField jtfStageTransRate;
    private javax.swing.JTextField jtfStartDate;
    private javax.swing.JTextField jtfStartTime;
    private javax.swing.JTextField jtfTimeStep;
    // End of variables declaration//GEN-END:variables
    
}
