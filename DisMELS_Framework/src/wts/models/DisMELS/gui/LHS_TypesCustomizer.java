/*
 * LHS_TypesCustomizer.java
 *
 * Created on April 4, 2006, 11:24 AM
 */

package wts.models.DisMELS.gui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Logger;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import wts.models.DisMELS.framework.LHS_Type;
import wts.models.DisMELS.framework.LHS_Types;

/**
 * @author William Stockhausen
 */
public class LHS_TypesCustomizer extends javax.swing.JPanel 
                                 implements java.beans.Customizer, 
                                            PropertyChangeListener {
    
    private LHS_Types lhsTypes = null;
    private DefaultMutableTreeNode root = 
            new DefaultMutableTreeNode("The LHS types");
    private DefaultTreeModel tm;
    
    private static final Logger logger = Logger.getLogger(LHS_TypesCustomizer.class.getName());
    
    /** Creates new customizer LHS_TypesCustomizer */
    public LHS_TypesCustomizer() {
        initComponents();
        jTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    }
    
    @Override
    public void setObject(Object bean) {
        if (bean instanceof LHS_Types) {
            if (lhsTypes!=null) lhsTypes.removePropertyChangeListener(this);
            lhsTypes = (LHS_Types) bean;
            createTree();
            selectNode(0);
            lhsTypes.addPropertyChangeListener(this);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jpCustomizer = new javax.swing.JPanel();
        typeCustomizer = new wts.models.DisMELS.framework.LHS_TypeCustomizer();
        jpButtons = new javax.swing.JPanel();
        jbAddNew = new javax.swing.JButton();
        jbAddNext = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jpTree = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        jpCustomizer.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpCustomizer.setLayout(new java.awt.BorderLayout());
        jpCustomizer.add(typeCustomizer, java.awt.BorderLayout.CENTER);

        jScrollPane2.setViewportView(jpCustomizer);

        add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jpButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpButtons.setMaximumSize(new java.awt.Dimension(80, 51));
        jpButtons.setMinimumSize(new java.awt.Dimension(80, 74));
        jpButtons.setPreferredSize(new java.awt.Dimension(100, 51));
        jpButtons.setLayout(new javax.swing.BoxLayout(jpButtons, javax.swing.BoxLayout.Y_AXIS));

        jbAddNew.setText("Add new");
        jbAddNew.setToolTipText("Add new LHS");
        jbAddNew.setMaximumSize(new java.awt.Dimension(100, 23));
        jbAddNew.setMinimumSize(new java.awt.Dimension(100, 23));
        jbAddNew.setPreferredSize(new java.awt.Dimension(100, 23));
        jbAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddNewActionPerformed(evt);
            }
        });
        jpButtons.add(jbAddNew);

        jbAddNext.setText("Add next");
        jbAddNext.setToolTipText("Add next LHS");
        jbAddNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbAddNext.setMaximumSize(new java.awt.Dimension(100, 25));
        jbAddNext.setMinimumSize(new java.awt.Dimension(100, 25));
        jbAddNext.setPreferredSize(new java.awt.Dimension(100, 25));
        jbAddNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddNextActionPerformed(evt);
            }
        });
        jpButtons.add(jbAddNext);

        jbRemove.setText("Remove");
        jbRemove.setMaximumSize(new java.awt.Dimension(100, 23));
        jbRemove.setMinimumSize(new java.awt.Dimension(100, 23));
        jbRemove.setPreferredSize(new java.awt.Dimension(100, 23));
        jbRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveActionPerformed(evt);
            }
        });
        jpButtons.add(jbRemove);

        add(jpButtons, java.awt.BorderLayout.EAST);

        jpTree.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpTree.setLayout(new java.awt.BorderLayout());

        jTree.setMinimumSize(new java.awt.Dimension(73, 64));
        jTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree);

        jpTree.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jpTree, java.awt.BorderLayout.WEST);
    }// </editor-fold>//GEN-END:initComponents

    private void jbRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveActionPerformed
        DefaultMutableTreeNode node = 
                (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();
        if (node==null) return;
        try {
            LHS_Type type = (LHS_Type) node.getUserObject();
            lhsTypes.removeType(type);
            tm.removeNodeFromParent(node);
            selectNode(0);
        } catch (ClassCastException exc) {
            //do nothing
        }
    }//GEN-LAST:event_jbRemoveActionPerformed

    private void jbAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddNewActionPerformed
        //check that all nodes have been named prior to adding a new node
        boolean chk = true;//assume all nodes are named
        for (int i=0; i<tm.getChildCount(root);i++) {
//            logger.info("Checking node "+i);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) tm.getChild(root,i);
            LHS_Type type = (LHS_Type) node.getUserObject();
            if (type.getLHSName().isEmpty()) {
                chk = false;//node is not named
            }
        }
        if (chk) {
            addNewType();
        }
    }//GEN-LAST:event_jbAddNewActionPerformed

    private void jTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeValueChanged
        DefaultMutableTreeNode node = 
                (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();
        if (node==null) return;
        try {
            LHS_Type type = (LHS_Type) node.getUserObject();
            typeCustomizer.setObject(type);
            validate();
            typeCustomizer.repaint();
            repaint();
        } catch (ClassCastException exc) {
            //do nothing
        }
    }//GEN-LAST:event_jTreeValueChanged

    private void jbAddNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddNextActionPerformed
        //check that all nodes have been named prior to adding a new node
        boolean chk = true;//assume all nodes are named
        for (int i=0; i<tm.getChildCount(root);i++) {
//            logger.info("Checking node "+i);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) tm.getChild(root,i);
            LHS_Type type = (LHS_Type) node.getUserObject();
            if (type.getLHSName().isEmpty()) {
                chk = false;//node is not named
            }
        }
        if (chk) {
            addNextType();
        }
    }//GEN-LAST:event_jbAddNextActionPerformed

    /**
     * Add a new LHS type to the Types Customizer
     */
    private void addNewType() {
        LHS_Type newType = new LHS_Type();
        newType.setLHSName(LHS_Type.VALUE_NOT_SET);
        lhsTypes.addType(newType);        
        DefaultMutableTreeNode child = new DefaultMutableTreeNode(newType,false);
        tm.insertNodeInto(child,root,root.getChildCount());
        int i = tm.getIndexOfChild(root,child);
        selectNode(i);
        repaint();        
    }    

    /**
     * Add an LHS type to the Types Customizer
     */
    private void addNextType() {
        DefaultMutableTreeNode node = 
                (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();
        if (node!=null) {
            DefaultMutableTreeNode child = null;
            LHS_Type type = (LHS_Type) node.getUserObject();
            for (String name : type.getNextLHSNames()){
                LHS_Type newType = new LHS_Type();
                newType.setLHSName(name);
                newType.setLHSClass(type.getNextLHSClass(name));
                lhsTypes.addType(newType);        
                child = new DefaultMutableTreeNode(newType,false);
                tm.insertNodeInto(child,root,root.getChildCount());
            }
            int i = tm.getIndexOfChild(root,child);//last node created
            selectNode(i);//select last node
            repaint();        
        }
    }    
    
    private void createTree() {
        root.removeAllChildren();
        DefaultMutableTreeNode child = null;
        Set<String> keySet = lhsTypes.getKeys();
        Iterator<String> it = keySet.iterator();
        while (it.hasNext()) {
            String key = it.next();
            LHS_Type type = lhsTypes.getType(key);
            child = new DefaultMutableTreeNode(type,false);
            root.add(child);
        }
        tm = new DefaultTreeModel(root);
        jTree.setModel(tm);
        repaint();
    }

    private void selectNode(int i) {
        if (i<tm.getChildCount(root)) {
//            logger.info("Selecting node "+i);
            jTree.setSelectionRow(i+1);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) tm.getChild(root,i);
            LHS_Type type = (LHS_Type) node.getUserObject();
            typeCustomizer.setObject(type);
            typeCustomizer.setVisible(true);
            validate();
            typeCustomizer.repaint();
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        switch (evt.getPropertyName()) {
            case LHS_Types.PROP_types:
                //All types have changed, so recreate the type tree
                logger.info("property change "+evt.getPropertyName()+": "+evt.toString());
                createTree();             //create tree defined types to tree
                selectNode(0);            //set first node as selected
                break;
            case LHS_Types.PROP_typeNameChange:
                logger.info("property change "+evt.getPropertyName()+": "+evt.toString());
                //TODO: not sure that we need to change the node here??
                //get selected node
                DefaultMutableTreeNode node = 
                        (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();
                if (node!=null) tm.nodeChanged(node);
                validate();
                repaint();
                break;
            case LHS_Types.PROP_addType:
                logger.info("property change "+evt.getPropertyName()+": "+evt.toString());
                break;
            case LHS_Types.PROP_removeType:
                logger.info("property change "+evt.getPropertyName()+": "+evt.toString());
                break;
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree;
    private javax.swing.JButton jbAddNew;
    private javax.swing.JButton jbAddNext;
    private javax.swing.JButton jbRemove;
    private javax.swing.JPanel jpButtons;
    private javax.swing.JPanel jpCustomizer;
    private javax.swing.JPanel jpTree;
    private wts.models.DisMELS.framework.LHS_TypeCustomizer typeCustomizer;
    // End of variables declaration//GEN-END:variables
    
}
