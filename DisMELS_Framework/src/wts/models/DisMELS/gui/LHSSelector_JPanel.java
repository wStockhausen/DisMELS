/*
 * LHSSelector_JPanel.java
 *
 * Created on March 8, 2006, 4:36 PM
 */

package wts.models.DisMELS.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import wts.models.DisMELS.framework.LHS_Factory;

/**
 *
 * @author  William Stockhausen
 */
public class LHSSelector_JPanel extends javax.swing.JPanel {
    
    public static final String PROP_enabled  = "enabled";
    public static final String PROP_selectedName  = "selected name";
    
    private boolean enabled  = true;
    private String selectedName;
    
    /**
     * Creates new form LHSSelector_JPanel
     */
    public LHSSelector_JPanel() {
        initComponents();
        updateTypeNames();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbLHS = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Life stage"));

        jcbLHS.setMaximumRowCount(100);
        jcbLHS.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbLHS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbLHSActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jcbLHS, 0, 368, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jcbLHS, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbLHSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbLHSActionPerformed
        if (isEnabled()) fireActionPerformed();
    }//GEN-LAST:event_jcbLHSActionPerformed
    
    /**
     * Sets the LHS type names returned by LHS_Factory.getTypeNames().
     * This should be called when the DisMELS working directory is changed or
     * when LHS_Types.xml has been modified.
     */
    public void updateTypeNames() {
        String[] names = LHS_Factory.getTypeNames();
        jcbLHS.removeAllItems();
        for (String name: names) {
            jcbLHS.addItem(name);
        }
        jcbLHS.setSelectedIndex(0);
        getSelectedName();
    }
    
    @Override
    public boolean isEnabled() {
        return enabled;
    }
    
    @Override
    public void setEnabled(boolean b) {
        boolean oldVal = enabled;
        enabled = b;
        jcbLHS.setEnabled(b);
        firePropertyChange(PROP_enabled,oldVal,enabled);
    }    

    public String getSelectedName() {
        Object o = jcbLHS.getSelectedItem();
        if (o instanceof String) selectedName = (String) o;
        return selectedName;
    }
    
    public void setSelectedName(String key) {
        String oldVal = selectedName;
        selectedName = key;
        firePropertyChange(PROP_selectedName,oldVal,selectedName);
        jcbLHS.setSelectedItem(key);
    }
    /**
     * Adds the specified action listener to receive 
     * action events from this textfield.
     *
     * @param l the action listener to be added
     */ 
    public synchronized void addActionListener(ActionListener l) {
        listenerList.add(ActionListener.class, l);
    }

    /**
     * Removes the specified action listener so that it no longer
     * receives action events from this textfield.
     *
     * @param l the action listener to be removed
     */ 
    public synchronized void removeActionListener(ActionListener l) {
        listenerList.remove(ActionListener.class, l);
    }

    /**
     * Returns an array of all the <code>ActionListener</code>s added
     * to this JTextField with addActionListener().
     *
     * @return all of the <code>ActionListener</code>s added or an empty
     *         array if no listeners have been added
     * @since 1.4
     */
    public synchronized ActionListener[] getActionListeners() {
        return (ActionListener[])listenerList.getListeners(
                ActionListener.class);
    }

    /**
     * Notifies all listeners that have registered interest for
     * notification on this event type.  The event instance 
     * is lazily created.
     * The listener list is processed in last to
     * first order.
     * @see EventListenerList
     */
    protected void fireActionPerformed() {
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        int modifiers = 0;
        ActionEvent e =
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED,null);
                            
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ActionListener.class) {
                ((ActionListener)listeners[i+1]).actionPerformed(e);
            }          
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jcbLHS;
    // End of variables declaration//GEN-END:variables
    
}
