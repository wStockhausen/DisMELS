/*
 * LifeStageParametersCustomizer.java
 *
 * Created on March 10, 2006, 3:55 PM
 */

package wts.models.DisMELS.gui;

import java.awt.BorderLayout;
import java.beans.*;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Logger;
import javax.swing.*;
import wts.models.DisMELS.framework.IBMFunctions.IBMParameter;
import wts.models.DisMELS.framework.LifeStageParametersInterface;

/**
 *
 * @author  William Stockhausen
 */
public class LifeStageParametersCustomizer extends javax.swing.JPanel
                                           implements Customizer {
    
    protected LifeStageParametersInterface obj = null;
    
    private static final Logger logger = Logger.getLogger(LifeStageParametersCustomizer.class.getName());
    
    /** Creates new form LifeStageParametersCustomizer */
    public LifeStageParametersCustomizer() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setObject(Object bean){        
        if (bean instanceof LifeStageParametersInterface){
            obj = (LifeStageParametersInterface) bean;
            constructUI();
        }
    }
    
    private void constructUI(){
//        TitledBorder tb = javax.swing.BorderFactory.createTitledBorder(obj.getTypeName());
//        this.setBorder(tb);
        
        this.removeAll();//remove all components
        
        try {
            BeanInfo bi = Introspector.getBeanInfo(obj.getClass());
            BeanDescriptor bd = bi.getBeanDescriptor();
            Class cClass = bd.getCustomizerClass();
            JPanel customizer = (JPanel) cClass.newInstance();
            this.add(customizer,BorderLayout.CENTER);
            logger.info("Found customizer for LifeStageParameters type "+obj.getTypeName());
        } catch (IntrospectionException|InstantiationException|IllegalAccessException|NullPointerException ex){
            constructCustomizer();
        }
        
        this.validate();
        this.repaint();
    }
    
    private void constructCustomizer(){
        logger.info("Constructing customizer for LifeStageParameters type "+obj.getTypeName());
        //set up tabbed panes
        javax.swing.JTabbedPane jTabbedPane1 = new javax.swing.JTabbedPane();
        javax.swing.JPanel jpParams    = new javax.swing.JPanel();
        javax.swing.JPanel jpFunctions = new javax.swing.JPanel();

        jpParams.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("IBM parameters", jpParams);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        
        //construct tab for parameters
        JScrollPane jspParams = new JScrollPane();
        jspParams.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jspParams.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        JPanel jp1 = new JPanel();
//        TitledBorder tb1 = javax.swing.BorderFactory.createTitledBorder("Parameters");
//        jp1.setBorder(tb1);
        jp1.setLayout(new BorderLayout());
        jspParams.setViewportView(jp1);
        Set<String> pKeys = obj.getIBMParameterNames();
        if (pKeys.isEmpty()){
            JLabel jl = new JLabel();
            jl.setText("no settable parameters defined for this life stage");
            jp1.add(jl,BorderLayout.NORTH);
        } else {
            for (Iterator<String> it = pKeys.iterator(); it.hasNext();) {
                String key = it.next();
//                logger.info("parameter key = "+key);
                IBMParameter mfp1 = obj.getIBMParameter(key);
//                logger.info("name = "+mfp1.getName());
                JPanel jp = new JPanel(new BorderLayout());
                jp1.add(jp,BorderLayout.CENTER);
                try {
                    BeanInfo bi = Introspector.getBeanInfo(mfp1.getClass());
                    BeanDescriptor bd = bi.getBeanDescriptor();
                    Class cClass = bd.getCustomizerClass();
                    Customizer czr = (Customizer) cClass.newInstance();
                    czr.setObject(mfp1);
                    jp.add((JPanel) czr,BorderLayout.NORTH);
                } catch (IntrospectionException|InstantiationException|IllegalAccessException ex){}
                jp1 = jp;
            }
        }
        jpParams.add(jspParams,BorderLayout.CENTER);
        
        //construct tab for functions
        jpFunctions.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("IBM functions", jpFunctions);
        
        JTabbedPane jtpFCats = new JTabbedPane();
        jtpFCats.setTabPlacement(JTabbedPane.BOTTOM);
        jpFunctions.add(jtpFCats,BorderLayout.CENTER);
        
        Set<String> cats = obj.getIBMFunctionCategories();
        for (String cat: cats){
            JPanel jpFCat = new JPanel();
            jpFCat.setLayout(new BorderLayout());
            jtpFCats.addTab(cat+" functions",jpFCat);
            
            IBMFunctionsCustomizer czr = new IBMFunctionsCustomizer();
            czr.setObject(obj, cat);
            jpFCat.add(czr,BorderLayout.CENTER);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
