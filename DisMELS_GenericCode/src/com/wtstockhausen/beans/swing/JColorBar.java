/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JColorBar.java
 *
 * Created on Apr 6, 2009, 10:05:28 AM
 */

package com.wtstockhausen.beans.swing;

import com.wtstockhausen.utils.ColorRamp;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;

/**
 *
 * @author wstockhausen
 */
public class JColorBar extends javax.swing.JPanel {

    private boolean vertical = true;
    private int nc = 20;
    private String clrRamp = ColorRamp.COLORRAMP_JET;

    /** Creates new form JColorBar */
    public JColorBar() {
        //initialize visual components
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public String getColorRamp() {
        return clrRamp;
    }

    public void setColorRamp(String rampName){
        clrRamp = rampName;
    }

    public int getNumberOfColors() {
        return nc;
    }

    public void setNumberOfColors(int val){
        nc = val;
    }

    public boolean isVertical() {
        return vertical;
    }

    public void setVertical(boolean b) {
        vertical = b;
    }

    @Override
    public void paintComponent(Graphics g) {
        //System.out.println("call to paint!");
        super.paintComponent(g);
        updateColorBar(g);
    }

    private void updateColorBar(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        Dimension dim = getSize();
        Color rgb = null;
        int width  = (int) dim.getWidth();
        int height = (int) dim.getHeight();
        double x = 0;double dx = 0;int xp=0;
        double y = 0;double dy = 0;int yp=0;
        if (vertical) {
            yp = 1;
            dy = ((double)height)/nc;
        } else {
            xp = 1;
            dx = ((double)width)/nc;
        }
        for (int c=0;c<nc;c++) {
            rgb = ColorRamp.createColor(c*(dx/width+dy/height), clrRamp);
            g2d.setColor(rgb);
            g2d.fillRect((int)Math.floor(x),
                         (int)Math.floor(y),
                         (int)Math.round(1.1*dx+(1-xp)*width),
                         (int)Math.round(1.1*dy+(1-yp)*height));
            x = x+dx;
            y = y+dy;
            //System.out.println("Filling rect at: "+(int)(x)+":"+(int)(dx+(1-xp)*width)+";"+(int)(y)+":"+ (int)(dy+(1-yp)*height));
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
